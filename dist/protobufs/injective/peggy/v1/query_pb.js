// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file injective/peggy/v1/query.proto (package injective.peggy.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { LastClaimEvent, Valset } from "./types_pb.js";
import { MsgConfirmBatch, MsgValsetConfirm } from "./msgs_pb.js";
import { BatchFees } from "./pool_pb.js";
import { OutgoingTransferTx, OutgoingTxBatch } from "./batch_pb.js";
import { GenesisState } from "./genesis_pb.js";
/**
 * @generated from message injective.peggy.v1.QueryParamsRequest
 */
class QueryParamsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsRequest, a, b);
    }
}
QueryParamsRequest.runtime = proto3;
QueryParamsRequest.typeName = "injective.peggy.v1.QueryParamsRequest";
QueryParamsRequest.fields = proto3.util.newFieldList(() => []);
export { QueryParamsRequest };
/**
 * @generated from message injective.peggy.v1.QueryParamsResponse
 */
class QueryParamsResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryParamsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryParamsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryParamsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryParamsResponse, a, b);
    }
}
QueryParamsResponse.runtime = proto3;
QueryParamsResponse.typeName = "injective.peggy.v1.QueryParamsResponse";
QueryParamsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
]);
export { QueryParamsResponse };
/**
 * @generated from message injective.peggy.v1.QueryCurrentValsetRequest
 */
class QueryCurrentValsetRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryCurrentValsetRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryCurrentValsetRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryCurrentValsetRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryCurrentValsetRequest, a, b);
    }
}
QueryCurrentValsetRequest.runtime = proto3;
QueryCurrentValsetRequest.typeName = "injective.peggy.v1.QueryCurrentValsetRequest";
QueryCurrentValsetRequest.fields = proto3.util.newFieldList(() => []);
export { QueryCurrentValsetRequest };
/**
 * @generated from message injective.peggy.v1.QueryCurrentValsetResponse
 */
class QueryCurrentValsetResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryCurrentValsetResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryCurrentValsetResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryCurrentValsetResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryCurrentValsetResponse, a, b);
    }
}
QueryCurrentValsetResponse.runtime = proto3;
QueryCurrentValsetResponse.typeName = "injective.peggy.v1.QueryCurrentValsetResponse";
QueryCurrentValsetResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "valset", kind: "message", T: Valset },
]);
export { QueryCurrentValsetResponse };
/**
 * @generated from message injective.peggy.v1.QueryValsetRequestRequest
 */
class QueryValsetRequestRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 nonce = 1;
         */
        this.nonce = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryValsetRequestRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryValsetRequestRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryValsetRequestRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryValsetRequestRequest, a, b);
    }
}
QueryValsetRequestRequest.runtime = proto3;
QueryValsetRequestRequest.typeName = "injective.peggy.v1.QueryValsetRequestRequest";
QueryValsetRequestRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
export { QueryValsetRequestRequest };
/**
 * @generated from message injective.peggy.v1.QueryValsetRequestResponse
 */
class QueryValsetRequestResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryValsetRequestResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryValsetRequestResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryValsetRequestResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryValsetRequestResponse, a, b);
    }
}
QueryValsetRequestResponse.runtime = proto3;
QueryValsetRequestResponse.typeName = "injective.peggy.v1.QueryValsetRequestResponse";
QueryValsetRequestResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "valset", kind: "message", T: Valset },
]);
export { QueryValsetRequestResponse };
/**
 * @generated from message injective.peggy.v1.QueryValsetConfirmRequest
 */
class QueryValsetConfirmRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 nonce = 1;
         */
        this.nonce = protoInt64.zero;
        /**
         * @generated from field: string address = 2;
         */
        this.address = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryValsetConfirmRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryValsetConfirmRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryValsetConfirmRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryValsetConfirmRequest, a, b);
    }
}
QueryValsetConfirmRequest.runtime = proto3;
QueryValsetConfirmRequest.typeName = "injective.peggy.v1.QueryValsetConfirmRequest";
QueryValsetConfirmRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
export { QueryValsetConfirmRequest };
/**
 * @generated from message injective.peggy.v1.QueryValsetConfirmResponse
 */
class QueryValsetConfirmResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryValsetConfirmResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryValsetConfirmResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryValsetConfirmResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryValsetConfirmResponse, a, b);
    }
}
QueryValsetConfirmResponse.runtime = proto3;
QueryValsetConfirmResponse.typeName = "injective.peggy.v1.QueryValsetConfirmResponse";
QueryValsetConfirmResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "confirm", kind: "message", T: MsgValsetConfirm },
]);
export { QueryValsetConfirmResponse };
/**
 * @generated from message injective.peggy.v1.QueryValsetConfirmsByNonceRequest
 */
class QueryValsetConfirmsByNonceRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 nonce = 1;
         */
        this.nonce = protoInt64.zero;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryValsetConfirmsByNonceRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryValsetConfirmsByNonceRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryValsetConfirmsByNonceRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryValsetConfirmsByNonceRequest, a, b);
    }
}
QueryValsetConfirmsByNonceRequest.runtime = proto3;
QueryValsetConfirmsByNonceRequest.typeName = "injective.peggy.v1.QueryValsetConfirmsByNonceRequest";
QueryValsetConfirmsByNonceRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
]);
export { QueryValsetConfirmsByNonceRequest };
/**
 * @generated from message injective.peggy.v1.QueryValsetConfirmsByNonceResponse
 */
class QueryValsetConfirmsByNonceResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.peggy.v1.MsgValsetConfirm confirms = 1;
         */
        this.confirms = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryValsetConfirmsByNonceResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryValsetConfirmsByNonceResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryValsetConfirmsByNonceResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryValsetConfirmsByNonceResponse, a, b);
    }
}
QueryValsetConfirmsByNonceResponse.runtime = proto3;
QueryValsetConfirmsByNonceResponse.typeName = "injective.peggy.v1.QueryValsetConfirmsByNonceResponse";
QueryValsetConfirmsByNonceResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "confirms", kind: "message", T: MsgValsetConfirm, repeated: true },
]);
export { QueryValsetConfirmsByNonceResponse };
/**
 * @generated from message injective.peggy.v1.QueryLastValsetRequestsRequest
 */
class QueryLastValsetRequestsRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryLastValsetRequestsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryLastValsetRequestsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryLastValsetRequestsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryLastValsetRequestsRequest, a, b);
    }
}
QueryLastValsetRequestsRequest.runtime = proto3;
QueryLastValsetRequestsRequest.typeName = "injective.peggy.v1.QueryLastValsetRequestsRequest";
QueryLastValsetRequestsRequest.fields = proto3.util.newFieldList(() => []);
export { QueryLastValsetRequestsRequest };
/**
 * @generated from message injective.peggy.v1.QueryLastValsetRequestsResponse
 */
class QueryLastValsetRequestsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.peggy.v1.Valset valsets = 1;
         */
        this.valsets = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryLastValsetRequestsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryLastValsetRequestsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryLastValsetRequestsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryLastValsetRequestsResponse, a, b);
    }
}
QueryLastValsetRequestsResponse.runtime = proto3;
QueryLastValsetRequestsResponse.typeName = "injective.peggy.v1.QueryLastValsetRequestsResponse";
QueryLastValsetRequestsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "valsets", kind: "message", T: Valset, repeated: true },
]);
export { QueryLastValsetRequestsResponse };
/**
 * @generated from message injective.peggy.v1.QueryLastPendingValsetRequestByAddrRequest
 */
class QueryLastPendingValsetRequestByAddrRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string address = 1;
         */
        this.address = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryLastPendingValsetRequestByAddrRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryLastPendingValsetRequestByAddrRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryLastPendingValsetRequestByAddrRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryLastPendingValsetRequestByAddrRequest, a, b);
    }
}
QueryLastPendingValsetRequestByAddrRequest.runtime = proto3;
QueryLastPendingValsetRequestByAddrRequest.typeName = "injective.peggy.v1.QueryLastPendingValsetRequestByAddrRequest";
QueryLastPendingValsetRequestByAddrRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
export { QueryLastPendingValsetRequestByAddrRequest };
/**
 * @generated from message injective.peggy.v1.QueryLastPendingValsetRequestByAddrResponse
 */
class QueryLastPendingValsetRequestByAddrResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.peggy.v1.Valset valsets = 1;
         */
        this.valsets = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryLastPendingValsetRequestByAddrResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryLastPendingValsetRequestByAddrResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryLastPendingValsetRequestByAddrResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryLastPendingValsetRequestByAddrResponse, a, b);
    }
}
QueryLastPendingValsetRequestByAddrResponse.runtime = proto3;
QueryLastPendingValsetRequestByAddrResponse.typeName = "injective.peggy.v1.QueryLastPendingValsetRequestByAddrResponse";
QueryLastPendingValsetRequestByAddrResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "valsets", kind: "message", T: Valset, repeated: true },
]);
export { QueryLastPendingValsetRequestByAddrResponse };
/**
 * @generated from message injective.peggy.v1.QueryBatchFeeRequest
 */
class QueryBatchFeeRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryBatchFeeRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryBatchFeeRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryBatchFeeRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryBatchFeeRequest, a, b);
    }
}
QueryBatchFeeRequest.runtime = proto3;
QueryBatchFeeRequest.typeName = "injective.peggy.v1.QueryBatchFeeRequest";
QueryBatchFeeRequest.fields = proto3.util.newFieldList(() => []);
export { QueryBatchFeeRequest };
/**
 * @generated from message injective.peggy.v1.QueryBatchFeeResponse
 */
class QueryBatchFeeResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.peggy.v1.BatchFees batchFees = 1;
         */
        this.batchFees = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryBatchFeeResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryBatchFeeResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryBatchFeeResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryBatchFeeResponse, a, b);
    }
}
QueryBatchFeeResponse.runtime = proto3;
QueryBatchFeeResponse.typeName = "injective.peggy.v1.QueryBatchFeeResponse";
QueryBatchFeeResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "batchFees", kind: "message", T: BatchFees, repeated: true },
]);
export { QueryBatchFeeResponse };
/**
 * @generated from message injective.peggy.v1.QueryLastPendingBatchRequestByAddrRequest
 */
class QueryLastPendingBatchRequestByAddrRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string address = 1;
         */
        this.address = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryLastPendingBatchRequestByAddrRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryLastPendingBatchRequestByAddrRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryLastPendingBatchRequestByAddrRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryLastPendingBatchRequestByAddrRequest, a, b);
    }
}
QueryLastPendingBatchRequestByAddrRequest.runtime = proto3;
QueryLastPendingBatchRequestByAddrRequest.typeName = "injective.peggy.v1.QueryLastPendingBatchRequestByAddrRequest";
QueryLastPendingBatchRequestByAddrRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
export { QueryLastPendingBatchRequestByAddrRequest };
/**
 * @generated from message injective.peggy.v1.QueryLastPendingBatchRequestByAddrResponse
 */
class QueryLastPendingBatchRequestByAddrResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryLastPendingBatchRequestByAddrResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryLastPendingBatchRequestByAddrResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryLastPendingBatchRequestByAddrResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryLastPendingBatchRequestByAddrResponse, a, b);
    }
}
QueryLastPendingBatchRequestByAddrResponse.runtime = proto3;
QueryLastPendingBatchRequestByAddrResponse.typeName = "injective.peggy.v1.QueryLastPendingBatchRequestByAddrResponse";
QueryLastPendingBatchRequestByAddrResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "batch", kind: "message", T: OutgoingTxBatch },
]);
export { QueryLastPendingBatchRequestByAddrResponse };
/**
 * @generated from message injective.peggy.v1.QueryOutgoingTxBatchesRequest
 */
class QueryOutgoingTxBatchesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryOutgoingTxBatchesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryOutgoingTxBatchesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryOutgoingTxBatchesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryOutgoingTxBatchesRequest, a, b);
    }
}
QueryOutgoingTxBatchesRequest.runtime = proto3;
QueryOutgoingTxBatchesRequest.typeName = "injective.peggy.v1.QueryOutgoingTxBatchesRequest";
QueryOutgoingTxBatchesRequest.fields = proto3.util.newFieldList(() => []);
export { QueryOutgoingTxBatchesRequest };
/**
 * @generated from message injective.peggy.v1.QueryOutgoingTxBatchesResponse
 */
class QueryOutgoingTxBatchesResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.peggy.v1.OutgoingTxBatch batches = 1;
         */
        this.batches = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryOutgoingTxBatchesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryOutgoingTxBatchesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryOutgoingTxBatchesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryOutgoingTxBatchesResponse, a, b);
    }
}
QueryOutgoingTxBatchesResponse.runtime = proto3;
QueryOutgoingTxBatchesResponse.typeName = "injective.peggy.v1.QueryOutgoingTxBatchesResponse";
QueryOutgoingTxBatchesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "batches", kind: "message", T: OutgoingTxBatch, repeated: true },
]);
export { QueryOutgoingTxBatchesResponse };
/**
 * @generated from message injective.peggy.v1.QueryBatchRequestByNonceRequest
 */
class QueryBatchRequestByNonceRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 nonce = 1;
         */
        this.nonce = protoInt64.zero;
        /**
         * @generated from field: string contract_address = 2;
         */
        this.contractAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryBatchRequestByNonceRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryBatchRequestByNonceRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryBatchRequestByNonceRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryBatchRequestByNonceRequest, a, b);
    }
}
QueryBatchRequestByNonceRequest.runtime = proto3;
QueryBatchRequestByNonceRequest.typeName = "injective.peggy.v1.QueryBatchRequestByNonceRequest";
QueryBatchRequestByNonceRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
export { QueryBatchRequestByNonceRequest };
/**
 * @generated from message injective.peggy.v1.QueryBatchRequestByNonceResponse
 */
class QueryBatchRequestByNonceResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryBatchRequestByNonceResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryBatchRequestByNonceResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryBatchRequestByNonceResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryBatchRequestByNonceResponse, a, b);
    }
}
QueryBatchRequestByNonceResponse.runtime = proto3;
QueryBatchRequestByNonceResponse.typeName = "injective.peggy.v1.QueryBatchRequestByNonceResponse";
QueryBatchRequestByNonceResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "batch", kind: "message", T: OutgoingTxBatch },
]);
export { QueryBatchRequestByNonceResponse };
/**
 * @generated from message injective.peggy.v1.QueryBatchConfirmsRequest
 */
class QueryBatchConfirmsRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: uint64 nonce = 1;
         */
        this.nonce = protoInt64.zero;
        /**
         * @generated from field: string contract_address = 2;
         */
        this.contractAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryBatchConfirmsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryBatchConfirmsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryBatchConfirmsRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryBatchConfirmsRequest, a, b);
    }
}
QueryBatchConfirmsRequest.runtime = proto3;
QueryBatchConfirmsRequest.typeName = "injective.peggy.v1.QueryBatchConfirmsRequest";
QueryBatchConfirmsRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
export { QueryBatchConfirmsRequest };
/**
 * @generated from message injective.peggy.v1.QueryBatchConfirmsResponse
 */
class QueryBatchConfirmsResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.peggy.v1.MsgConfirmBatch confirms = 1;
         */
        this.confirms = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryBatchConfirmsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryBatchConfirmsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryBatchConfirmsResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryBatchConfirmsResponse, a, b);
    }
}
QueryBatchConfirmsResponse.runtime = proto3;
QueryBatchConfirmsResponse.typeName = "injective.peggy.v1.QueryBatchConfirmsResponse";
QueryBatchConfirmsResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "confirms", kind: "message", T: MsgConfirmBatch, repeated: true },
]);
export { QueryBatchConfirmsResponse };
/**
 * @generated from message injective.peggy.v1.QueryLastEventByAddrRequest
 */
class QueryLastEventByAddrRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string address = 1;
         */
        this.address = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryLastEventByAddrRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryLastEventByAddrRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryLastEventByAddrRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryLastEventByAddrRequest, a, b);
    }
}
QueryLastEventByAddrRequest.runtime = proto3;
QueryLastEventByAddrRequest.typeName = "injective.peggy.v1.QueryLastEventByAddrRequest";
QueryLastEventByAddrRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
export { QueryLastEventByAddrRequest };
/**
 * @generated from message injective.peggy.v1.QueryLastEventByAddrResponse
 */
class QueryLastEventByAddrResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryLastEventByAddrResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryLastEventByAddrResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryLastEventByAddrResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryLastEventByAddrResponse, a, b);
    }
}
QueryLastEventByAddrResponse.runtime = proto3;
QueryLastEventByAddrResponse.typeName = "injective.peggy.v1.QueryLastEventByAddrResponse";
QueryLastEventByAddrResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "last_claim_event", kind: "message", T: LastClaimEvent },
]);
export { QueryLastEventByAddrResponse };
/**
 * @generated from message injective.peggy.v1.QueryERC20ToDenomRequest
 */
class QueryERC20ToDenomRequest extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string erc20 = 1;
         */
        this.erc20 = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryERC20ToDenomRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryERC20ToDenomRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryERC20ToDenomRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryERC20ToDenomRequest, a, b);
    }
}
QueryERC20ToDenomRequest.runtime = proto3;
QueryERC20ToDenomRequest.typeName = "injective.peggy.v1.QueryERC20ToDenomRequest";
QueryERC20ToDenomRequest.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "erc20", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
export { QueryERC20ToDenomRequest };
/**
 * @generated from message injective.peggy.v1.QueryERC20ToDenomResponse
 */
class QueryERC20ToDenomResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        /**
         * @generated from field: bool cosmos_originated = 2;
         */
        this.cosmosOriginated = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryERC20ToDenomResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryERC20ToDenomResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryERC20ToDenomResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryERC20ToDenomResponse, a, b);
    }
}
QueryERC20ToDenomResponse.runtime = proto3;
QueryERC20ToDenomResponse.typeName = "injective.peggy.v1.QueryERC20ToDenomResponse";
QueryERC20ToDenomResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cosmos_originated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
export { QueryERC20ToDenomResponse };
/**
 * @generated from message injective.peggy.v1.QueryDenomToERC20Request
 */
class QueryDenomToERC20Request extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string denom = 1;
         */
        this.denom = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDenomToERC20Request().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDenomToERC20Request().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDenomToERC20Request().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDenomToERC20Request, a, b);
    }
}
QueryDenomToERC20Request.runtime = proto3;
QueryDenomToERC20Request.typeName = "injective.peggy.v1.QueryDenomToERC20Request";
QueryDenomToERC20Request.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
export { QueryDenomToERC20Request };
/**
 * @generated from message injective.peggy.v1.QueryDenomToERC20Response
 */
class QueryDenomToERC20Response extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string erc20 = 1;
         */
        this.erc20 = "";
        /**
         * @generated from field: bool cosmos_originated = 2;
         */
        this.cosmosOriginated = false;
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDenomToERC20Response().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDenomToERC20Response().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDenomToERC20Response().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDenomToERC20Response, a, b);
    }
}
QueryDenomToERC20Response.runtime = proto3;
QueryDenomToERC20Response.typeName = "injective.peggy.v1.QueryDenomToERC20Response";
QueryDenomToERC20Response.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "erc20", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cosmos_originated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
export { QueryDenomToERC20Response };
/**
 * @generated from message injective.peggy.v1.QueryDelegateKeysByValidatorAddress
 */
class QueryDelegateKeysByValidatorAddress extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string validator_address = 1;
         */
        this.validatorAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDelegateKeysByValidatorAddress().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDelegateKeysByValidatorAddress().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDelegateKeysByValidatorAddress().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDelegateKeysByValidatorAddress, a, b);
    }
}
QueryDelegateKeysByValidatorAddress.runtime = proto3;
QueryDelegateKeysByValidatorAddress.typeName = "injective.peggy.v1.QueryDelegateKeysByValidatorAddress";
QueryDelegateKeysByValidatorAddress.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
export { QueryDelegateKeysByValidatorAddress };
/**
 * @generated from message injective.peggy.v1.QueryDelegateKeysByValidatorAddressResponse
 */
class QueryDelegateKeysByValidatorAddressResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string eth_address = 1;
         */
        this.ethAddress = "";
        /**
         * @generated from field: string orchestrator_address = 2;
         */
        this.orchestratorAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDelegateKeysByValidatorAddressResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDelegateKeysByValidatorAddressResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDelegateKeysByValidatorAddressResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDelegateKeysByValidatorAddressResponse, a, b);
    }
}
QueryDelegateKeysByValidatorAddressResponse.runtime = proto3;
QueryDelegateKeysByValidatorAddressResponse.typeName = "injective.peggy.v1.QueryDelegateKeysByValidatorAddressResponse";
QueryDelegateKeysByValidatorAddressResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "eth_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "orchestrator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
export { QueryDelegateKeysByValidatorAddressResponse };
/**
 * @generated from message injective.peggy.v1.QueryDelegateKeysByEthAddress
 */
class QueryDelegateKeysByEthAddress extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string eth_address = 1;
         */
        this.ethAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDelegateKeysByEthAddress().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDelegateKeysByEthAddress().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDelegateKeysByEthAddress().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDelegateKeysByEthAddress, a, b);
    }
}
QueryDelegateKeysByEthAddress.runtime = proto3;
QueryDelegateKeysByEthAddress.typeName = "injective.peggy.v1.QueryDelegateKeysByEthAddress";
QueryDelegateKeysByEthAddress.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "eth_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
export { QueryDelegateKeysByEthAddress };
/**
 * @generated from message injective.peggy.v1.QueryDelegateKeysByEthAddressResponse
 */
class QueryDelegateKeysByEthAddressResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string validator_address = 1;
         */
        this.validatorAddress = "";
        /**
         * @generated from field: string orchestrator_address = 2;
         */
        this.orchestratorAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDelegateKeysByEthAddressResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDelegateKeysByEthAddressResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDelegateKeysByEthAddressResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDelegateKeysByEthAddressResponse, a, b);
    }
}
QueryDelegateKeysByEthAddressResponse.runtime = proto3;
QueryDelegateKeysByEthAddressResponse.typeName = "injective.peggy.v1.QueryDelegateKeysByEthAddressResponse";
QueryDelegateKeysByEthAddressResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "orchestrator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
export { QueryDelegateKeysByEthAddressResponse };
/**
 * @generated from message injective.peggy.v1.QueryDelegateKeysByOrchestratorAddress
 */
class QueryDelegateKeysByOrchestratorAddress extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string orchestrator_address = 1;
         */
        this.orchestratorAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDelegateKeysByOrchestratorAddress().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDelegateKeysByOrchestratorAddress().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDelegateKeysByOrchestratorAddress().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDelegateKeysByOrchestratorAddress, a, b);
    }
}
QueryDelegateKeysByOrchestratorAddress.runtime = proto3;
QueryDelegateKeysByOrchestratorAddress.typeName = "injective.peggy.v1.QueryDelegateKeysByOrchestratorAddress";
QueryDelegateKeysByOrchestratorAddress.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "orchestrator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
export { QueryDelegateKeysByOrchestratorAddress };
/**
 * @generated from message injective.peggy.v1.QueryDelegateKeysByOrchestratorAddressResponse
 */
class QueryDelegateKeysByOrchestratorAddressResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string validator_address = 1;
         */
        this.validatorAddress = "";
        /**
         * @generated from field: string eth_address = 2;
         */
        this.ethAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryDelegateKeysByOrchestratorAddressResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryDelegateKeysByOrchestratorAddressResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryDelegateKeysByOrchestratorAddressResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryDelegateKeysByOrchestratorAddressResponse, a, b);
    }
}
QueryDelegateKeysByOrchestratorAddressResponse.runtime = proto3;
QueryDelegateKeysByOrchestratorAddressResponse.typeName = "injective.peggy.v1.QueryDelegateKeysByOrchestratorAddressResponse";
QueryDelegateKeysByOrchestratorAddressResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "eth_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
export { QueryDelegateKeysByOrchestratorAddressResponse };
/**
 * @generated from message injective.peggy.v1.QueryPendingSendToEth
 */
class QueryPendingSendToEth extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string sender_address = 1;
         */
        this.senderAddress = "";
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPendingSendToEth().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPendingSendToEth().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPendingSendToEth().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPendingSendToEth, a, b);
    }
}
QueryPendingSendToEth.runtime = proto3;
QueryPendingSendToEth.typeName = "injective.peggy.v1.QueryPendingSendToEth";
QueryPendingSendToEth.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "sender_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
export { QueryPendingSendToEth };
/**
 * @generated from message injective.peggy.v1.QueryPendingSendToEthResponse
 */
class QueryPendingSendToEthResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated injective.peggy.v1.OutgoingTransferTx transfers_in_batches = 1;
         */
        this.transfersInBatches = [];
        /**
         * @generated from field: repeated injective.peggy.v1.OutgoingTransferTx unbatched_transfers = 2;
         */
        this.unbatchedTransfers = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryPendingSendToEthResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryPendingSendToEthResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryPendingSendToEthResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryPendingSendToEthResponse, a, b);
    }
}
QueryPendingSendToEthResponse.runtime = proto3;
QueryPendingSendToEthResponse.typeName = "injective.peggy.v1.QueryPendingSendToEthResponse";
QueryPendingSendToEthResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "transfers_in_batches", kind: "message", T: OutgoingTransferTx, repeated: true },
    { no: 2, name: "unbatched_transfers", kind: "message", T: OutgoingTransferTx, repeated: true },
]);
export { QueryPendingSendToEthResponse };
/**
 * QueryModuleStateRequest is the request type for the Query/PeggyModuleState
 * RPC method.
 *
 * @generated from message injective.peggy.v1.QueryModuleStateRequest
 */
class QueryModuleStateRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryModuleStateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryModuleStateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryModuleStateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryModuleStateRequest, a, b);
    }
}
QueryModuleStateRequest.runtime = proto3;
QueryModuleStateRequest.typeName = "injective.peggy.v1.QueryModuleStateRequest";
QueryModuleStateRequest.fields = proto3.util.newFieldList(() => []);
export { QueryModuleStateRequest };
/**
 * QueryModuleStateResponse is the response type for the Query/PeggyModuleState
 * RPC method.
 *
 * @generated from message injective.peggy.v1.QueryModuleStateResponse
 */
class QueryModuleStateResponse extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new QueryModuleStateResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new QueryModuleStateResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new QueryModuleStateResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(QueryModuleStateResponse, a, b);
    }
}
QueryModuleStateResponse.runtime = proto3;
QueryModuleStateResponse.typeName = "injective.peggy.v1.QueryModuleStateResponse";
QueryModuleStateResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "message", T: GenesisState },
]);
export { QueryModuleStateResponse };
/**
 * @generated from message injective.peggy.v1.MissingNoncesRequest
 */
class MissingNoncesRequest extends Message {
    constructor(data) {
        super();
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MissingNoncesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MissingNoncesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MissingNoncesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MissingNoncesRequest, a, b);
    }
}
MissingNoncesRequest.runtime = proto3;
MissingNoncesRequest.typeName = "injective.peggy.v1.MissingNoncesRequest";
MissingNoncesRequest.fields = proto3.util.newFieldList(() => []);
export { MissingNoncesRequest };
/**
 * @generated from message injective.peggy.v1.MissingNoncesResponse
 */
class MissingNoncesResponse extends Message {
    constructor(data) {
        super();
        /**
         * @generated from field: repeated string operator_addresses = 1;
         */
        this.operatorAddresses = [];
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MissingNoncesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MissingNoncesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MissingNoncesResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MissingNoncesResponse, a, b);
    }
}
MissingNoncesResponse.runtime = proto3;
MissingNoncesResponse.typeName = "injective.peggy.v1.MissingNoncesResponse";
MissingNoncesResponse.fields = proto3.util.newFieldList(() => [
    { no: 1, name: "operator_addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
]);
export { MissingNoncesResponse };
//# sourceMappingURL=query_pb.js.map